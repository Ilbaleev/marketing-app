/**
 * –ú–æ–¥—É–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å DOM –∏
 * –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã HTML –¥–ª—è –∑–∞–¥–∞—á, –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –±–ª–æ–∫–∞ –∫–æ–º–∞–Ω–¥—ã.
 */

import {
    PROJECT_PRIORITY,
    PROJECT_STATUS,
    escapeAttribute,
    escapeHTML,
    formatDateTime,
    getPlainText,
    getPriorityBadge,
    getTaskDeadline,
    getTaskStatusClass,
    getTaskStatusText,
    getTaskValue,
    parseDate,
    percent,
    truncate
} from './helpers.js';

export function toggleHidden(element, hidden) {
    if (!element) return;
    element.classList.toggle('hidden', hidden);
}

export function showInlineError(element, message) {
    if (!element) return;
    element.textContent = message;
    toggleHidden(element, false);
}

export function clearInlineError(element) {
    if (!element) return;
    element.textContent = '';
    toggleHidden(element, true);
}

export function updateTimestamp(element, date) {
    if (!element) return;
    if (!date) {
        element.textContent = '–û–±–Ω–æ–≤–ª–µ–Ω–æ: ‚Äî';
        return;
    }
    element.textContent = `–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${formatDateTime(date)}`;
}

export function updateActiveUserInfo(element, { environment, bitrixUserId, currentUser }) {
    if (!element) {
        return;
    }

    if (environment.isDemoMode) {
        element.textContent = '–î–µ–º–æ-—Ä–µ–∂–∏–º: –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ.';
        toggleHidden(element, false);
        return;
    }

    if (!bitrixUserId) {
        element.textContent = 'Bitrix24 ID –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ Telegram ‚Üî Bitrix24.';
        toggleHidden(element, false);
        return;
    }

    const telegramInfo = currentUser && currentUser.id && currentUser.id !== 'demo' && currentUser.id !== 'manual'
        ? `Telegram ID: ${currentUser.id}`
        : null;
    const parts = [telegramInfo, `Bitrix24 ID: ${bitrixUserId}`].filter(Boolean);

    element.textContent = `–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Üí ${parts.join(' ¬∑ ')}`;
    toggleHidden(element, false);
}

export function renderTask(task) {
    const title = escapeHTML(getTaskValue(task, 'TITLE') || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è');
    const description = escapeHTML(truncate(getPlainText(getTaskValue(task, 'DESCRIPTION')) || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'));
    const priorityLabel = getPriorityBadge(getTaskValue(task, 'PRIORITY'));
    const statusValue = getTaskValue(task, 'STATUS');
    const statusClass = getTaskStatusClass(statusValue);
    const statusText = getTaskStatusText(statusValue);
    const deadline = getTaskDeadline(task);
    const taskId = getTaskValue(task, 'ID');

    return `
        <article class="task-item">
            <div class="task-header">
                <h3 class="task-title">${title}</h3>
                <span class="status-badge status-${statusClass}">${statusText}</span>
            </div>
            ${priorityLabel ? `<span class="badge">${priorityLabel}</span>` : ''}
            <p class="task-description">${description}</p>
            <div class="task-meta">
                <span class="task-deadline${deadline.overdue ? ' deadline-overdue' : ''}">${escapeHTML(deadline.text)}</span>
                <span class="task-id">ID: ${escapeHTML(taskId || '')}</span>
            </div>
        </article>
    `;
}

export function renderAnalytics(summary) {
    const statusItems = Object.entries(summary.statuses)
        .sort((a, b) => Number.parseInt(a[0], 10) - Number.parseInt(b[0], 10))
        .map(([status, count]) => {
            const label = getTaskStatusText(status);
            return `<li><span>${escapeHTML(label)}</span><span>${count} (${percent(count, summary.total)}%)</span></li>`;
        })
        .join('');

    const priorityItems = [
        { label: '–í—ã—Å–æ–∫–∏–π üî•', value: summary.highPriority },
        { label: '–°—Ä–µ–¥–Ω–∏–π ‚ö°', value: summary.mediumPriority },
        { label: '–û–±—ã—á–Ω—ã–π', value: summary.lowPriority }
    ].map(item => `<li><span>${item.label}</span><span>${item.value} (${percent(item.value, summary.total)}%)</span></li>`).join('');

    return `
        <div class="cards-grid">
            <div class="card">
                <h4>–í—Å–µ–≥–æ –∑–∞–¥–∞—á</h4>
                <strong>${summary.total}</strong>
                <span>–í–∫–ª—é—á–∞—è –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ</span>
            </div>
            <div class="card">
                <h4>–ê–∫—Ç–∏–≤–Ω—ã–µ</h4>
                <strong>${summary.active}</strong>
                <span>–í —Ä–∞–±–æ—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å</span>
            </div>
            <div class="card">
                <h4>–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ</h4>
                <strong>${summary.completed}</strong>
                <span>–°—Ç–∞—Ç—É—Å ¬´–ó–∞–≤–µ—Ä—à–µ–Ω–∞¬ª</span>
            </div>
            <div class="card">
                <h4>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ</h4>
                <strong>${summary.overdue}</strong>
                <span>–°—Ä–æ–∫ —É–∂–µ –Ω–∞—Å—Ç—É–ø–∏–ª</span>
            </div>
        </div>
        <div class="analytics-details">
            <h3>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º</h3>
            <ul>${statusItems || '<li><span>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</span><span>‚Äî</span></li>'}</ul>
            <h3>–ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º</h3>
            <ul>${priorityItems}</ul>
        </div>
    `;
}

export function renderProjectCard(project) {
    if (!project || typeof project !== 'object') {
        return '';
    }

    const statusKey = PROJECT_STATUS[project.status] ? project.status : 'active';
    const priorityKey = PROJECT_PRIORITY[project.priority] ? project.priority : 'medium';
    const statusLabel = PROJECT_STATUS[statusKey] || PROJECT_STATUS.active;
    const priorityLabel = PROJECT_PRIORITY[priorityKey] || '';
    const title = escapeHTML(project.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è');
    const siteLink = typeof project.siteUrl === 'string' && project.siteUrl.trim()
        ? `<a href="${escapeAttribute(project.siteUrl)}" target="_blank" rel="noopener">–ø–µ—Ä–µ–π—Ç–∏</a>`
        : '‚Äî';
    const driveLink = typeof project.driveUrl === 'string' && project.driveUrl.trim()
        ? `<a href="${escapeAttribute(project.driveUrl)}" target="_blank" rel="noopener">–ø–µ—Ä–µ–π—Ç–∏</a>`
        : '‚Äî';
    const createdDate = parseDate(project.createdAt);
    const createdLabel = createdDate ? formatDateTime(createdDate) : '‚Äî';

    return `
        <article class="task-item project-item" data-id="${escapeAttribute(project.id || '')}">
            <div class="task-header">
                <h3 class="task-title">${title}</h3>
                <span class="status-badge">${escapeHTML(statusLabel)}</span>
            </div>
            ${priorityLabel ? `<span class="badge">${priorityLabel}</span>` : ''}
            <div class="task-meta">
                <span>–°–∞–π—Ç: ${siteLink}</span>
                <span>–î–∏—Å–∫: ${driveLink}</span>
            </div>
            <div class="task-meta">
                <span>–°–æ–∑–¥–∞–Ω: ${escapeHTML(createdLabel)}</span>
                <button class="secondary-button project-status-toggle" data-id="${escapeAttribute(project.id || '')}">–°–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å</button>
            </div>
        </article>
    `;
}

export function renderProjectsList(list) {
    if (!Array.isArray(list) || !list.length) {
        return '<div class="empty-state">–ü—Ä–æ–µ–∫—Ç—ã —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</div>';
    }
    return list.map(renderProjectCard).join('');

}
